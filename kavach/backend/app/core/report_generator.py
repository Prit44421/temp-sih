"""PDF report generation for Kavach compliance reports."""
from __future__ import annotations

import os
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional

from reportlab.lib import colors
from reportlab.lib.pagesizes import A4, letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import (
    Paragraph,
    SimpleDocTemplate,
    Spacer,
    Table,
    TableStyle,
)
from reportlab.platypus.flowables import HRFlowable

from kavach.backend.app.core.logging_manager import get_logging_manager
from kavach.backend.app.core.os_detect import get_os_info
from kavach.backend.app.models.rules import RuleSet


class ReportGenerator:
    """Generate comprehensive PDF compliance reports."""
    
    def __init__(self, output_dir: Optional[Path] = None):
        self.output_dir = output_dir or Path.home() / ".kavach" / "reports"
        self.output_dir.mkdir(parents=True, exist_ok=True)
        self.logging_manager = get_logging_manager()
        self.styles = getSampleStyleSheet()
        
        # Custom styles
        self.title_style = ParagraphStyle(
            'CustomTitle',
            fontName='Helvetica-Bold',
            fontSize=20,
            textColor=colors.HexColor('#1f2937'),
            spaceAfter=30,
            alignment=1  # Center
        )
        
        self.section_style = ParagraphStyle(
            'SectionHeader',
            fontName='Helvetica-Bold',
            fontSize=14,
            textColor=colors.HexColor('#374151'),
            spaceAfter=12,
            spaceBefore=20
        )
        
        self.subsection_style = ParagraphStyle(
            'SubsectionHeader',
            fontName='Helvetica-Bold',
            fontSize=12,
            textColor=colors.HexColor('#4b5563'),
            spaceAfter=8,
            spaceBefore=12
        )
    
    def generate_compliance_report(
        self,
        ruleset: List[RuleSet],
        output_filename: Optional[str] = None,
        include_logs: bool = True,
        session_id: Optional[str] = None
    ) -> Path:
        """Generate a comprehensive compliance report."""
        
        if not output_filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_filename = f"kavach_compliance_report_{timestamp}.pdf"
        
        output_path = self.output_dir / output_filename
        
        # Create document
        doc = SimpleDocTemplate(
            str(output_path),
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=18
        )
        
        # Build report content
        story = []
        
        # Title page
        story.extend(self._build_title_page())
        
        # Executive summary
        story.extend(self._build_executive_summary(ruleset))
        
        # System information
        story.extend(self._build_system_info())
        
        # Rule compliance details
        story.extend(self._build_rule_details(ruleset))
        
        # Logging summary (if requested)
        if include_logs:
            story.extend(self._build_logging_summary(session_id))
        
        # Recommendations
        story.extend(self._build_recommendations(ruleset))
        
        # Build PDF
        doc.build(story)
        
        return output_path
    
    def _build_title_page(self) -> List[Any]:
        """Build the title page content."""
        story = []
        
        # Main title
        story.append(Paragraph("Kavach Security Compliance Report", self.title_style))
        story.append(Spacer(1, 0.5 * inch))
        
        # Generation info
        generation_time = datetime.now().strftime("%B %d, %Y at %I:%M %p")
        story.append(Paragraph(f"Generated on: {generation_time}", self.styles['Normal']))
        story.append(Paragraph(f"Generated by: {os.getenv('USERNAME') or os.getenv('USER') or 'System'}", self.styles['Normal']))
        story.append(Spacer(1, 0.5 * inch))
        
        # Description
        description = """
        This report provides a comprehensive analysis of system security hardening compliance 
        based on established security benchmarks. The assessment covers multiple security domains 
        including access controls, network security, audit policies, and system configuration.
        """
        story.append(Paragraph(description, self.styles['Normal']))
        
        # Page break
        story.append(Spacer(1, 2 * inch))
        
        return story
    
    def _build_executive_summary(self, ruleset: List[RuleSet]) -> List[Any]:
        """Build executive summary section."""
        story = []
        
        story.append(Paragraph("Executive Summary", self.section_style))
        
        # Calculate compliance statistics
        total_rules = sum(len(rs.rules) for rs in ruleset)
        
        # Get rule execution logs for statistics
        session_logs = self.logging_manager.get_session_logs()
        
        # Count compliance checks (most recent status for each rule)
        rule_compliance_status = {}
        for log in session_logs:
            if log.get('action') == 'compliance_check':
                rule_id = log.get('rule_id')
                status = log.get('status')
                if rule_id and status:
                    rule_compliance_status[rule_id] = status
        
        compliant_rules = len([s for s in rule_compliance_status.values() if s == 'compliant'])
        
        # Count successfully applied rules
        completed_rules = len([log for log in session_logs if log.get('action') == 'complete' and log.get('status') == 'success'])
        failed_rules = len([log for log in session_logs if log.get('status') == 'failure'])
        
        # Summary statistics table
        summary_data = [
            ['Metric', 'Count', 'Percentage'],
            ['Total Rules Evaluated', str(total_rules), '100%'],
            ['Rules Already Compliant', str(compliant_rules), f"{(compliant_rules/total_rules*100):.1f}%" if total_rules > 0 else "0%"],
            ['Rules Successfully Applied', str(completed_rules), f"{(completed_rules/total_rules*100):.1f}%" if total_rules > 0 else "0%"],
            ['Rules Failed', str(failed_rules), f"{(failed_rules/total_rules*100):.1f}%" if total_rules > 0 else "0%"]
        ]
        
        summary_table = Table(summary_data, colWidths=[3*inch, 1.5*inch, 1.5*inch])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
        ]))
        
        story.append(summary_table)
        story.append(Spacer(1, 0.3 * inch))
        
        # Compliance score
        if total_rules > 0:
            compliance_score = ((compliant_rules + completed_rules) / total_rules) * 100
        else:
            compliance_score = 0
            
        story.append(Paragraph(f"Overall Compliance Score: {compliance_score:.1f}%", self.subsection_style))
        
        # Risk assessment
        if compliance_score >= 90:
            risk_level = "Low"
            risk_color = colors.green
        elif compliance_score >= 70:
            risk_level = "Medium"
            risk_color = colors.orange
        else:
            risk_level = "High"
            risk_color = colors.red
        
        risk_para = Paragraph(f"Risk Level: <font color='{risk_color}'>{risk_level}</font>", self.styles['Normal'])
        story.append(risk_para)
        
        story.append(Spacer(1, 0.3 * inch))
        
        return story
    
    def _build_system_info(self) -> List[Any]:
        """Build system information section."""
        story = []
        
        story.append(Paragraph("System Information", self.section_style))
        
        # Get system info
        sys_info = get_os_info()
        
        # System details table
        system_data = [
            ['Attribute', 'Value'],
            ['Operating System', sys_info.get('system', 'Unknown')],
            ['Platform', sys_info.get('platform', 'Unknown')],
            ['Architecture', sys_info.get('architecture', 'Unknown')],
            ['Hostname', sys_info.get('hostname', 'Unknown')],
            ['Python Version', sys_info.get('python_version', 'Unknown')]
        ]
        
        # Add OS-specific information
        if 'distro_id' in sys_info:
            system_data.append(['Distribution', sys_info.get('distro_id', 'Unknown')])
        if 'distro_version' in sys_info:
            system_data.append(['Distribution Version', sys_info.get('distro_version', 'Unknown')])
        if 'windows_edition' in sys_info:
            system_data.append(['Windows Edition', sys_info.get('windows_edition', 'Unknown')])
        if 'windows_version' in sys_info:
            system_data.append(['Windows Version', sys_info.get('windows_version', 'Unknown')])
        
        system_table = Table(system_data, colWidths=[2*inch, 4*inch])
        system_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
        ]))
        
        story.append(system_table)
        story.append(Spacer(1, 0.3 * inch))
        
        return story
    
    def _build_rule_details(self, ruleset: List[RuleSet]) -> List[Any]:
        """Build detailed rule compliance section."""
        story = []
        
        story.append(Paragraph("Rule Compliance Details", self.section_style))
        
        # Get execution logs for rule status
        session_logs = self.logging_manager.get_session_logs()
        rule_status_map = {}
        
        # Process logs to get most recent status for each rule
        for log in session_logs:
            rule_id = log.get('rule_id')
            if not rule_id:
                continue
            
            action = log.get('action')
            status = log.get('status')
            
            # Priority: compliance_check > complete > failure > others
            if action == 'compliance_check':
                if status == 'compliant':
                    rule_status_map[rule_id] = ('Compliant', colors.green)
                elif status == 'non_compliant':
                    rule_status_map[rule_id] = ('Not Compliant', colors.orange)
            elif action == 'complete' and status == 'success':
                # Only set if not already marked as compliant
                if rule_id not in rule_status_map or rule_status_map[rule_id][0] not in ['Compliant', 'Not Compliant']:
                    rule_status_map[rule_id] = ('Applied', colors.blue)
            elif status == 'failure':
                if rule_id not in rule_status_map:
                    rule_status_map[rule_id] = ('Failed', colors.red)
            elif status == 'skipped':
                if rule_id not in rule_status_map:
                    rule_status_map[rule_id] = ('Skipped', colors.orange)
        
        # Group rules by module
        for ruleset_item in ruleset:
            story.append(Paragraph(f"Module: {ruleset_item.module.title()} ({ruleset_item.os.title()})", self.subsection_style))
            
            # Rules table for this module
            rule_data = [['Rule ID', 'Title', 'Level', 'Status']]
            
            for rule in ruleset_item.rules:
                status_text = rule_status_map.get(rule.id, ('Not Evaluated', colors.gray))[0]
                
                rule_data.append([
                    rule.id,
                    rule.title[:50] + ('...' if len(rule.title) > 50 else ''),
                    rule.level.title(),
                    status_text
                ])
            
            rule_table = Table(rule_data, colWidths=[2*inch, 2.5*inch, 0.8*inch, 1*inch])
            rule_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('FONTSIZE', (0, 1), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
                ('VALIGN', (0, 0), (-1, -1), 'TOP')
            ]))
            
            story.append(rule_table)
            story.append(Spacer(1, 0.2 * inch))
        
        return story
    
    def _build_logging_summary(self, session_id: Optional[str] = None) -> List[Any]:
        """Build logging and audit trail section."""
        story = []
        
        story.append(Paragraph("Execution Log Summary", self.section_style))
        
        # Get recent logs
        if session_id:
            logs = [log for log in self.logging_manager.get_session_logs() if log.get('session_id') == session_id]
        else:
            logs = self.logging_manager.get_session_logs()
        
        if not logs:
            story.append(Paragraph("No execution logs available for this session.", self.styles['Normal']))
            return story
        
        # Show recent significant events
        significant_logs = [
            log for log in logs[-20:]  # Last 20 logs
            if log.get('action') in ['complete', 'remediate', 'rollback'] or log.get('status') in ['failure', 'error']
        ]
        
        if significant_logs:
            log_data = [['Timestamp', 'Rule ID', 'Action', 'Status', 'Message']]
            
            for log in significant_logs:
                timestamp = log.get('timestamp', '')
                if timestamp:
                    try:
                        dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                        timestamp = dt.strftime('%H:%M:%S')
                    except:
                        pass
                
                rule_id = log.get('rule_id', '')[:20] + ('...' if len(log.get('rule_id', '')) > 20 else '')
                action = log.get('action', '').capitalize()
                status = log.get('status', '').capitalize()
                message = log.get('message', '')[:40] + ('...' if len(log.get('message', '')) > 40 else '')
                
                log_data.append([timestamp, rule_id, action, status, message])
            
            log_table = Table(log_data, colWidths=[1*inch, 1.5*inch, 1*inch, 1*inch, 2*inch])
            log_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 9),
                ('FONTSIZE', (0, 1), (-1, -1), 8),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
                ('VALIGN', (0, 0), (-1, -1), 'TOP')
            ]))
            
            story.append(log_table)
        
        story.append(Spacer(1, 0.3 * inch))
        
        return story
    
    def _build_recommendations(self, ruleset: List[RuleSet]) -> List[Any]:
        """Build recommendations section."""
        story = []
        
        story.append(Paragraph("Recommendations", self.section_style))
        
        # Get failed rules for recommendations
        session_logs = self.logging_manager.get_session_logs()
        failed_rules = [log for log in session_logs if log.get('status') == 'failure']
        
        if failed_rules:
            story.append(Paragraph("Failed Rules Requiring Attention:", self.subsection_style))
            
            for i, log in enumerate(failed_rules[:10], 1):  # Top 10 failed rules
                rule_id = log.get('rule_id', 'Unknown')
                message = log.get('message', 'Rule execution failed')
                
                story.append(Paragraph(f"{i}. {rule_id}: {message}", self.styles['Normal']))
            
            story.append(Spacer(1, 0.2 * inch))
        
        # General recommendations
        story.append(Paragraph("General Security Recommendations:", self.subsection_style))
        
        recommendations = [
            "Review and remediate all failed rule applications manually.",
            "Implement a regular schedule for running compliance checks.",
            "Monitor system logs for security-related events.",
            "Keep all software and security patches up to date.",
            "Conduct periodic security assessments and penetration testing.",
            "Establish an incident response plan for security breaches.",
            "Provide security awareness training for all system users.",
            "Implement network segmentation and access controls.",
            "Regular backup and disaster recovery testing.",
            "Monitor and review user access privileges regularly."
        ]
        
        for i, rec in enumerate(recommendations, 1):
            story.append(Paragraph(f"{i}. {rec}", self.styles['Normal']))
        
        story.append(Spacer(1, 0.3 * inch))
        
        # Footer
        story.append(HRFlowable(width="100%", thickness=1, color=colors.HexColor('#e5e7eb')))
        story.append(Spacer(1, 0.1 * inch))
        
        footer_text = f"Report generated by Kavach Security Hardening Tool on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        story.append(Paragraph(footer_text, self.styles['Normal']))
        
        return story
    
    def generate_summary_report(self, output_filename: Optional[str] = None) -> Path:
        """Generate a quick summary report without detailed rule information."""
        
        if not output_filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_filename = f"kavach_summary_{timestamp}.pdf"
        
        output_path = self.output_dir / output_filename
        
        doc = SimpleDocTemplate(
            str(output_path),
            pagesize=letter,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=18
        )
        
        story = []
        
        # Title
        story.append(Paragraph("Kavach Security Summary", self.title_style))
        story.append(Spacer(1, 0.3 * inch))
        
        # System info
        story.extend(self._build_system_info())
        
        # Quick statistics
        session_logs = self.logging_manager.get_session_logs()
        if session_logs:
            story.append(Paragraph("Recent Activity Summary", self.section_style))
            
            total_events = len(session_logs)
            successful_events = len([log for log in session_logs if log.get('status') == 'success'])
            failed_events = len([log for log in session_logs if log.get('status') == 'failure'])
            
            story.append(Paragraph(f"Total Events: {total_events}", self.styles['Normal']))
            story.append(Paragraph(f"Successful Operations: {successful_events}", self.styles['Normal']))
            story.append(Paragraph(f"Failed Operations: {failed_events}", self.styles['Normal']))
        
        doc.build(story)
        return output_path


def generate_compliance_report(
    ruleset: List[RuleSet],
    output_filename: Optional[str] = None,
    output_dir: Optional[Path] = None
) -> Path:
    """Convenience function to generate a compliance report."""
    generator = ReportGenerator(output_dir)
    return generator.generate_compliance_report(ruleset, output_filename)


__all__ = ["ReportGenerator", "generate_compliance_report"]